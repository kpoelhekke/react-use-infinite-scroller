{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["EVENT_TYPES","threshold","isLoading","React","containerRef","a","doc","document","scrollTop","window","documentHeight","height","onLoadMore","event","Container","styled","div","Item","App","useState","limit","setLimit","console","log","Promise","resolve","setTimeout","useInfiniteScroll","items","Array","fill","slice","ref","map","_","index","key","ReactDOM","render","getElementById"],"mappings":"sRAOMA,EAAc,CAAC,SAArB,U,MAEA,gBAAqD,EAArD,EAAqD,WAArD,IAEEC,iBAFF,MAEc,IAFd,EAIQC,EAAYC,kBAAlB,GACMC,EAAeD,iBAArB,MA8BA,OA5BAA,qBAAgB,oBACd,IADc,2EACd,kCAAAE,EAAA,yDACOH,EAAL,QADF,oBAEUI,EACJC,0BAA4BA,cAA5BA,YAAwDA,SAD1D,KAEMC,OACJC,uBAAmCA,OAAnCA,YAAwDH,EAD1D,UAJJ,EAMuCA,EAAnC,wBAAgBI,EANpB,EAMYC,SACMD,IAA6BD,OAA3C,aAEA,GATJ,wBAUMP,aAVN,SAWYU,IAXZ,OAYMV,aAZN,6CADc,sBAsBd,OAJAF,WAAqBa,YAAD,OAClBJ,0BADFT,MAIO,kBACLA,WAAqBa,YAAD,OAClBJ,6BAFJ,SAIC,CAACG,EA1BJT,IA4BO,CACLC,iBCzCEU,EAAYC,IAAOC,IAAV,iEAAGD,CAAH,kEAMTE,EAAOF,IAAOC,IAAV,4DAAGD,CAAH,gGAsCKG,EA5BH,WAAO,IAAD,EACUf,IAAMgB,SAHf,IAED,mBACTC,EADS,KACFC,EADE,iDAGhB,sBAAAhB,EAAA,6DACEiB,QAAQC,IAAI,gBADd,SAGQ,IAAIC,SAAQ,SAACC,GACjBC,WAAWD,EAAS,QAJxB,OAOEJ,EAASD,EAZM,IAKjB,4CAHgB,0BAaRhB,EAAiBuB,EAAkB,CACzCf,WAdc,6CAaRR,aAIFwB,EAAQC,MAAM,KAAKC,KAAK,MAAMC,MAAM,EAAGX,GAE7C,OACE,kBAACN,EAAD,CAAWkB,IAAK5B,GACbwB,EAAMK,KAAI,SAACC,EAAGC,GAAJ,OACT,kBAAClB,EAAD,CAAMmB,IAAKD,GAAQA,QCtC3BE,IAASC,OAAO,kBAAC,EAAD,MAAS/B,SAASgC,eAAe,W","file":"static/js/main.da8e6fa7.chunk.js","sourcesContent":["import * as React from 'react';\n\nexport type InfiniteScrollProps = {\n  onLoadMore: () => void;\n  threshold?: number;\n};\n\nconst EVENT_TYPES = ['scroll', 'resize'];\n\nfunction useInfiniteScroll<E extends HTMLDivElement>({\n  onLoadMore,\n  threshold = 250,\n}: InfiniteScrollProps) {\n  const isLoading = React.useRef(false);\n  const containerRef = React.useRef<E>(null!);\n\n  React.useEffect(() => {\n    async function handleScroll() {\n      if (!isLoading.current) {\n        const doc =\n          document.documentElement || document.body.parentNode || document.body;\n        const scrollTop =\n          window.pageYOffset !== undefined ? window.pageYOffset : doc.scrollTop;\n        const { height: documentHeight } = doc.getBoundingClientRect();\n        const delta = documentHeight - scrollTop - window.innerHeight;\n\n        if (delta <= threshold) {\n          isLoading.current = true;\n          await onLoadMore();\n          isLoading.current = false;\n        }\n      }\n    }\n\n    EVENT_TYPES.forEach((event) =>\n      window.addEventListener(event, handleScroll)\n    );\n\n    return () =>\n      EVENT_TYPES.forEach((event) =>\n        window.removeEventListener(event, handleScroll)\n      );\n  }, [onLoadMore, threshold]);\n\n  return {\n    containerRef,\n  };\n}\n\nexport default useInfiniteScroll;\n","import React from 'react';\nimport useInfiniteScroll from 'react-use-infinite-scroller';\nimport styled from 'styled-components/macro';\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-gap: 1em;\n`;\n\nconst Item = styled.div`\n  height: 20em;\n  background-color: khaki;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst PAGE_LIMIT = 30;\n\nconst App = () => {\n  const [limit, setLimit] = React.useState(PAGE_LIMIT);\n\n  async function handleLoadMore() {\n    console.log('loading more');\n\n    await new Promise((resolve) => {\n      setTimeout(resolve, 1000);\n    });\n\n    setLimit(limit + PAGE_LIMIT);\n  }\n\n  const { containerRef } = useInfiniteScroll({\n    onLoadMore: handleLoadMore,\n  });\n\n  const items = Array(300).fill(null).slice(0, limit);\n\n  return (\n    <Container ref={containerRef}>\n      {items.map((_, index) => (\n        <Item key={index}>{index}</Item>\n      ))}\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}