{"version":3,"sources":["../../src/index.ts","App.tsx","index.tsx"],"names":["EVENT_TYPES","threshold","hasMore","isLoading","React","a","doc","document","scrollTop","window","documentHeight","height","onLoadMore","event","Container","styled","div","Item","wait","Promise","resolve","setTimeout","App","useState","limit","setLimit","containerRef","useRef","console","log","useInfiniteScroll","items","Array","fill","slice","ref","map","_","index","key","style","background","GlobalStyle","createGlobalStyle","ReactDOM","render","getElementById"],"mappings":"6RASMA,EAAc,CAAC,SAArB,U,MAEA,SAA2B,GAA3B,IAA2B,EAA3B,EAA2B,WAA3B,IAAyCC,iBAAzC,MAA2B,IAA3B,MAA0DC,eAA1D,SACQC,EAAYC,kBAAlB,GAEAA,qBAAgB,oBACd,IADc,2EACd,kCAAAC,EAAA,0DACMH,GAAYC,EAAhB,QADF,oBAEUG,EAAMC,0BAA4BA,cAA5BA,YAAwDA,SAApE,KACMC,OAAYC,uBAAmCA,OAAnCA,YAAwDH,EAA1E,UAHJ,EAIuCA,EAAnC,wBAAgBI,EAJpB,EAIYC,SACMD,IAA6BD,OAA3C,aAEA,GAPJ,wBAQMN,aARN,SASYS,IATZ,OAUMT,aAVN,6CADc,sBAkBd,OAFAH,WAAqBa,YAAD,OAAWJ,0BAA/BT,MAEO,kBAAMA,WAAqBa,YAAD,OAAWJ,6BAA5C,SACC,CAACG,EAnBJR,KCVIU,EAAYC,IAAOC,IAAV,iEAAGD,CAAH,oEAMTE,EAAOF,IAAOC,IAAV,4DAAGD,CAAH,yEASJG,EAAO,kBACX,IAAIC,SAAQ,SAACC,GACXC,WAAWD,EAAS,SAwCTE,EArCH,WAAO,IAAD,EACUlB,IAAMmB,SARf,IAOD,mBACTC,EADS,KACFC,EADE,KAGVC,EAAetB,IAAMuB,OAAuB,MAHlC,4CAKhB,sBAAAtB,EAAA,6DACEuB,QAAQC,IAAI,gBADd,SAGQX,IAHR,OAKEO,EAASD,EAjBM,IAYjB,4CALgB,sBAahBM,EAAkB,CAChBlB,WAdc,2CAedV,QAASsB,EAAQ,IACjBE,iBAGF,IAAMK,EAAQC,MAAM,KAAKC,KAAK,MAAMC,MAAM,EAAGV,GAE7C,OACE,kBAACV,EAAD,CAAWqB,IAAKT,GACbK,EAAMK,KAAI,SAACC,EAAGC,GAAJ,OACT,kBAACrB,EAAD,CACEsB,IAAKD,EACLE,MAAO,CACLC,WAAW,OAAD,OAASH,EAAT,eAGXA,EAAQ,Q,uHCjDnB,IAAMI,EAAcC,YAAH,KAOjBC,IAASC,OACP,oCACE,kBAACH,EAAD,MACA,kBAAC,EAAD,OAEFnC,SAASuC,eAAe,W","file":"static/js/main.a1ebacaa.chunk.js","sourcesContent":["import * as React from 'react';\n\nexport type InfiniteScrollProps = {\n  onLoadMore: () => void;\n  threshold?: number;\n  hasMore?: boolean;\n  containerRef?: React.RefObject<unknown>;\n};\n\nconst EVENT_TYPES = ['scroll', 'resize'];\n\nfunction useInfiniteScroll({ onLoadMore, threshold = 250, hasMore = true }: InfiniteScrollProps) {\n  const isLoading = React.useRef(false);\n\n  React.useEffect(() => {\n    async function handleScroll() {\n      if (hasMore && !isLoading.current) {\n        const doc = document.documentElement || document.body.parentNode || document.body;\n        const scrollTop = window.pageYOffset !== undefined ? window.pageYOffset : doc.scrollTop;\n        const { height: documentHeight } = doc.getBoundingClientRect();\n        const delta = documentHeight - scrollTop - window.innerHeight;\n\n        if (delta <= threshold) {\n          isLoading.current = true;\n          await onLoadMore();\n          isLoading.current = false;\n        }\n      }\n    }\n\n    EVENT_TYPES.forEach((event) => window.addEventListener(event, handleScroll));\n\n    return () => EVENT_TYPES.forEach((event) => window.removeEventListener(event, handleScroll));\n  }, [onLoadMore, threshold]);\n}\n\nexport default useInfiniteScroll;\n","import React from 'react';\nimport useInfiniteScroll from 'react-use-infinite-scroller';\nimport styled from 'styled-components/macro';\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: 1em;\n`;\n\nconst Item = styled.div`\n  height: 20em;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst PAGE_LIMIT = 36;\n\nconst wait = () =>\n  new Promise((resolve) => {\n    setTimeout(resolve, 1000);\n  });\n\nconst App = () => {\n  const [limit, setLimit] = React.useState(PAGE_LIMIT);\n\n  const containerRef = React.useRef<HTMLDivElement>(null!);\n\n  async function handleLoadMore() {\n    console.log('loading more');\n\n    await wait();\n\n    setLimit(limit + PAGE_LIMIT);\n  }\n\n  useInfiniteScroll({\n    onLoadMore: handleLoadMore,\n    hasMore: limit < 360,\n    containerRef,\n  });\n\n  const items = Array(360).fill(null).slice(0, limit);\n\n  return (\n    <Container ref={containerRef}>\n      {items.map((_, index) => (\n        <Item\n          key={index}\n          style={{\n            background: `hsl(${index},50%,50%)`,\n          }}\n        >\n          {index + 1}\n        </Item>\n      ))}\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\nimport App from './App';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    padding: 0;\n    margin: 0;\n  }\n`;\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App />\n  </>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}